section .data
	nn2 db 128
	mem db 100
section .text
	global _start

;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;-------------------------------------------------------------------START--------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------

_start:
	
	push ebp
	
	mov esp, ebp

	;call _ordenamiento_mariposa

	;asignación de valor de nn2  =>   

        mov bl, nn2

	mov bh,2   ; MMAX=AX
	
	;call _cicloinicio

	pop ebp	

	mov eax,60
	mov edi, 0
	syscall
;--------------------------------------------------------------------------------------------------------------------------------------------------------


_cicloinicio:            ;Etiqueta para el ciclo de inicio.

		cmp bh,bl                     ;nn2=32,64 or 128 CPI: Compara mmax con nn2.


		jl _cuerpodeciclo ;mientras nn2>r19 hacer while_schleife_body / BRLO: Branch condicional, en el que salta si mmax<nn2.


		jmp _clausura        ;llega al final del ciclo


;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;-----------------------------------------------------------------CUERPO DE CICLO------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------

_cuerpodeciclo:            ;Etiqueta para el ciclo de Body.

		mov ch, bh                  ;Movimiento de datos, se mueve mmax.

		lsl ch           ;r21:=2*mmax / r21:=2*mmax     LSL es un shift lógico de una posición a la izquierda

		xor cl, cl             ;Se coloca ii en cero. ii:=0

;--------------------------------------------------------------------------------------------------------------------------------------------------------------------

_Inicio_bucle_ii:    ;for ii=1 to (mmax div 2)  
    inc cl               ; se incrementa en uno la variable ii          
    mov dh,cl              ; Se mueve el valor de ii a "m"
    lsl dh                 ;m:=2*ii
    dec dh                ;m:=2*ii-1
    mov dl,bl          ;
    
    sub dl,dh            ;nn2-m
    
    mov al,dl         ;  
    mov ah,ch

    call div8u           ;Divisions routine
    
;.def   drem8u  =r15        ;remainder
;.def   dres8u  =r24        ;result   al
;.def   dd8u    =r24        ;dividend 
;.def   dv8u    =r25        ;divisor  ah

	
    mov si,al      ;r7:=nn2-m div istep   si
    
    xor dl, dl                  ;jj:=0  Inicialización para el loop   

;Ahora se obtienen los valores de coseno

    push dl


    mov ax, 2*cosinetab
    mov bp,nn2
    mov di,bh
    SHR di 
pp: SHR bp
    SHR di
    jne pp
    mov di,cl
    dec di
    mul di,bp
    add al,di
    adc ah,0
    add al,di   ;adicion doble de los punteros 
    adc ah,0   ;2 byte por cada entrada a la tabla "table entry" 
    mov bp, ax
    mov dl,BYTE [bp+0]  ;Ahora tenemos wrL(ow)
    add bp, 1
    mov dh,BYTE [bp+0]   ;ahora tenemos(igh)
    mov [mem], dx

;Ahora se obtienen los valores de seno

    mov ax, 2*sinetab
    mov bp,nn2
    mov di,bh
    SHR di
pq: SHR bp
    SHR di
    jne pq
    mov di,cl
    dec di
    mul di,bp
    add al,di
    adc ah,0
    add al,di   ;adicion doble de los punteros   
    adc ah,0   ;2 byte por cada entrada a la tabla "table entry"
    mov bp, ax
    mov dl,BYTE [bp]  ;Ahora tenemos wrL(ow)
    add bp, 1
    mov dh, BYTE [bp]   ;ahora tenemos(igh)
    
    mov [mem+4], dx

    pop dl
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------

_Inicio_bucle_jj:    ;Etiqueta del ciclo para volver al inicio.

    call _cuerpo_jj  ;Acomoda el loop con un branch instruction
                                ;donde la rutina de procesamiento se llama rcall 
                                
                                 
                                ;(Problema es del rango de salto brsh)
                                
    inc dl                 ; Se incrementa jj en 1.
    cmp si,dl              ; compara jj con nn2-m
    jge _Inicio_bucle_jj  
    ;Se termina el loop jj
    mov di,bh
    SHR di        ;iiende:=mmax div 2
    cmp cl,di              
    jl _Inicio_bucle_ii
    ;final de for_schleife_ii
    mov bh,ch
    jmp _cicloinicio

;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;------------------------------------------CLAUSURA------------------------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------


_clausura:

nop

for_final:            ;Resorting is done

nop

;Vienen calculos extra para el calculo para DC-Value (f_0) y f(N/2).

call _dccompensacion 

;****************************************************************
;* FFT está lista Data-array (starts at sramstart+2) 
;* Data-array (empieza en sramstart+2)
;* Contiene parte real y parte imaginaria como valores de 16bit (lo:hi)
;* Están en arreglos de pares, primero real y luego imaginario
;* Casos especiales se dan al inicio
;* primer valor real es f_0
;* primer dato imaginario f(N/2), representado como valor
;* NOTA: f_0 &y f(N/2) son numeros reales y no complejos
;****************************************************************
_final:           ; listo

mov eax, 1
mov edi, 1
mov esi,  7
mov edx,  1
syscall


_finalCodigo:
jmp _finalCodigo       ;fin  


;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------





;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;---------------------------------------------------FUNCIONES DE APOYO-----------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------

_cuerpo_jj:
;Calculo de los indices i y j

	push cl
	push bl

	mov BYTE [mem+32], bl

        mov bl,dh
        mul dl,ch    ;r0 := jj*istep   ;<=
        mov bl,idl     ; <=r0:Dir      
        add bl,dh         ;i:=m+jj*istep
        mov di,bl
        add di,bh
        mov cl, di      ;j:=i+mmax
	
	push ah
	push al	
	push bh
		
;Obtener los datos[j] y los datos[j+1] de la SRAM 

        mov ah,0 ; se inicializa en 0
        mov al,$0080 ; se posiciona
        add al,cl    ; inicia el recorrido
        adc ah, 0 ;Recordemos que los datos se guardan en 16 bits
        add al,cl       ;se duplica el indice
        adc ah, 0 ;de igual modo se guarda en el formato de 16 bits   
	mov bx,ax
	add ax, 1
	mov cx,ax
	add ax,1

        ;mov R8,ax+     ;[j]low-byte hole
        ;mov R9,ax+     ;j]High-byte hole
        ;mov R10,ax+     ;[j+1]low-Byte hole
        ;mov R11,ax      ;[j+1]High-Byte hole
		
		
;Para el calculo de tempi y tempr se requien multiples multiplicaciones y los datos de la pila

        push dh
        push dl
        push di
		
;Calculo de tempr
	
	mov dx, WORD [mem]
	
	mul edx,ebx 

	mov DWORD [mem+8], edx	
	
	mov edx, DWORD [mem+4]
	
	mul edx,ecx 

	mov DWORD [mem+12], edx	
	
      

	push bx	

	mov dx, WORD [mem+10]	
	mov bx, WORD [mem+14]
	sub dx, bx
		
	pop bx

	mov WORD [mem+24], dx
	
        ;sub r2,r4
        ;sbb r3,r5       ;tempr := wr*data[j]-wi*data[j+1]   

;Calculo de tempi

        ;push dx     
        ;push bx
	;push cx

	mov dx, WORD [mem]
	
	mul edx,ecx 

	mov DWORD [mem+16], edx 
	

	mov dx, [mem+4]
	
	mul edx,ebx 

	mov [mem+20], edx


        ;mov r21, r15
        ;mov r20, r14
        ;mov r23, R9
        ;Mov r22, R8
        ;call muls16x16_32 ;tempi:=wi*data[j] (16bit signed)
        ;MOV r5,r19  ;solo tomamos los high-result-bytes   
        ;MOV r4,r18  
	
	push bx

	mov dx, [mem+18]	
	mov bx, [mem+22]
	add dx, bx
	
	pop bx
	
	mov [mem+28], dx

	;push dx

        ;add r4,r2
        ;adc r5,r3       ;tempi := wr*data[j+1]+wi*data[j]   

        ;pop r3
        ;pop r2
        ;pop r16
        ;pop r17
        ;pop r18
        ;pop r19
        ;pop r20
        ;pop r21
        ;pop r22
        ;pop r23

	mov bl, [mem+32]	

;multiplicaciones terminadas, se apila y registra en orden


;Obtenga datos [i] de la SRAM
        mov ah,0 ;se inicializa en 0
        mov al,$0080 ; se posiciona en los datos
        add al,bl
        adc ah,0 ;cl
        add al,bl
        adc ah, 0 ;cl
	;carga de dato[i]
	
	push dx 
	mov dx, ax
	add ax, 1

        ;mov R10,ax+     ;[i]Low-Byte Hole
        ;mov R11,ax      ;[i]high-Byte hole
	
	

;data[j]:=data[i]-tempr

	push bx	
	mov bx, dx

        ;mov R9, R11;movw R9:R8, R11:R10
        ;mov R8, R10

        sar bh  
        ror bl  

	push cx
	mov cx, [mem+24]

	sub bx, cx		
	
	pop cx

        ;sub R8,r2
        ;sbb R9,r3

	

        mov ah,0
        mov al,$0080
        add al,cl
        adc ah, 0      ;r6
        add al, cl
        adc ah, 0      ;r6
        mov bp, ax
        mov [bp],bx
        add ax, 1
                       ;mov [ax],R8, R9
	pop bx
	
	pop dx
	
;Se obtienen los datos [i+1] de la SRAM 
	
        mov ah,0
        mov al,$0080
        add al,bl
        adc ah,0   ;r6
        add al,bl
        adc ah,0   ;r6
	add ax,2

	mov dx,ax
	add ax, 1
	
        ;mov R10,ax+     ;hole Data[i+1]low-Byte
        ;mov R11,ax      ;Hole Data[i+1]high-Byt

;data[j+1]:=data[i+1]-tempi
	
	push bx	
	mov bx, dx        
	sar bh  
        ror bl

	push cx
	mov cx, [mem+28]

	sub bx, cx

	pop cx

	mov ah,0
        mov al,$0080
        add al,cl
        adc ah, 0      ;r6
        add al, cl
        adc ah, 0      ;r6

	add ax,2
	
        mov bp, ax
        mov [bp],bx
        add ax, 1
                     
	pop bx


;data[i+1]:=data[i+1]+tempi
        sar dh
        ror dl

	push cx
	mov cx, [mem+28]
	add dx, cx
	pop cx

        mov ah,0
        mov al,$0080
        add al,bl
        adc ah,0 ;r6
        add al,bl
        adc ah,0 ;r6
	add ax,2

    mov bp, ax
	mov [bp], dx
	add ax, 1


;Obtenga los datos [i] de la SRAM 
        mov ah,0
        mov al,$0080
        add al,bl
        adc ah,0 ;r6
        add al,bl
        adc ah,0; r6
	mov dx, ax
	add ax, 1
        	;mov R10,X+     ;hole Data[i]low-Byte
        	;mov R11,X      ;Hole Data[i]high-Byte

;data[i]:=data[i]+tempr
        sar dh
        ror dl
	
	push cx
	mov cx, [mem+24]

	add dx, cx		
	
	pop cx	

         ;add dl,r2
         ;adc dh,r3

        mov ah,0
        mov al,$0080
        add al,bl
        adc ah,0  ; r6
        add al,bl
        adc ah, 0 ; r6
	mov bp, ax
	mov [bp], dx
	add ax, 1
	

	pop di
	pop dl
	pop dh
	pop bh
	pop al
	pop ah
	pop bl
	pop cl

        	;mov [X+],R10
        	;mov [X],R11
        ret     ;Se retorna a Schleife_jj

;--------------------------------------------------------------------------------------------------------------------------------------------------------------------

_dccompensacion:

        lds al,$0080+2
        lds ah,$0080+3
        lds bl,$0080+4
        lds bh,$0080+5
        
        mov ch, ah
        mov cl, al
        add al,bl
        adc ah,bh
        sub cl,bl
        sbb ch,bh
        sar bh
        ror bl
        sar ch
        ror cl
           ;sts $0080+2,R8
	    mov dx, $0080
	    mov bp, dx
        mov [bp+2], al

           ;sts $0080+3,R9
	;mov dx, $0080
	;add dx,
        mov [bp+3], ah

           ;sts $0080+4,r18
	;mov dx, $0080
	;add dx,4
    	mov [bp+4], cl

           ;sts $0080+5,r19
	;mov dx, $0080
	;add dx, 5

	mov [bp+5], ch

    ret



;ende DC-compensation



;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;------------------------------------------ORDENAMIENTO MARIPOSA ----------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
_ordenamientomariposa:
	;Se copian los datos en la SRAM.
	;Los datos de prueba se almacenan en formato de 16 bits signados (-16384 ...+16384). 
	;FFT tambien da datos en 16 bits
	
	mov cx, 2*testdata
	
	xor bl, bl

	captarbloque: ;Al copiar los valores se salva uno
		mov bp, cx
		mov al ,[bp]    ;Se cargan los valores de la tabla de origen
		inc cx
		inc bp
		mov ah,[bp]
		inc cx
		inc bp
		push ch
		push cl
	            ;para nn2 <> usar 128
	            ;tabla apropiada
		
		mov cx, 2*posicionesvalores128
		
		add cl,bl
		adc ch, 0 
		mov bp, cx
		mov di,[bp] ;Para salvar la info se obtiene la posicion 
		pop cl
		pop ch
		mov dh,0
		mov dl,0x0080
		add dl,di
		adc dh, 0
		add dl,di
		adc dh, 0
		mov bp, dx
		mov [bp],al    ;Se guarda primero el byte inferior
		inc dx
	    inc bp
		mov [bp],ah     ;Se guarda el byte superior 
	                ;Guardar de forma ordenada los datos en SRAM
		inc bl
		cmp bl,nn2  
		jne captarbloque

		;Ahora los datos para la fft se llaman y almacenan en la SRAM
		;Direccion(sramstart+2)=$0082. Para aplicaciones propias los datos deben 
		;organizarse desde el principio después de la tabla de 
		;clasificación "memory_locations_XX_values". 

		;Los datos se almacenan en la SRAM como un enteero con signo
		;Lo aanterior se hace en un formato de 16 bits
		;dw = LOW:HIGH 

ret

;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;---------------------------------------- FUNCIONES MATEMATICAS -----------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------

;--------------------------------------------------------------------------------------------------------------------------------------------------------------------


;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;*
;* "div8u" - 8/8 Bit Unsigned Division
;*
;* This subroutine divides the two register variables "dd8u" (dividend) and 
;* "dv8u" (divisor). The result is placed in "dres8u" and the remainder in
;* "drem8u".
;*  
;* Number of words	:66 + return
;* Number of cycles	:50/58/66 (Min/Avg/Max) + return
;* Low registers used	:1 (drem8u)
;* High registers used  :2 (dres8u/dd8u,dv8u)
;*
;***************************************************************************

;***** Subroutine Register Variables
 
 push bh

div8u:	

	sub	bh,bh	;clear remainder and carry
	
	rol	al		;shift left dividend
	rol	bh		;shift dividend into remainder
	sub	bh,ah	;remainder = remainder - divisor
	jnc	d8u_1		;if result negative
	add	bh,ah	;    restore remainder
	clc			;    clear carry to be shifted into result
	jmp	d8u_2		;else

d8u_1:	mov     si, 256
	add     si, 256 	;    set carry to be shifted into result  

d8u_2:	rol	al		;shift left dividend
	rol	bh		;shift dividend into remainder
	sub	bh,ah	;remainder = remainder - divisor
	jnc	d8u_3		;if result negative
	add	bh,ah	;    restore remainder
	clc			;    clear carry to be shifted into result
	jmp	d8u_4		;else

d8u_3:	mov     si, 256
	add     si, 256 	;    set carry to be shifted into result   

d8u_4:	rol	al		;shift left dividend
	rol	bh		;shift dividend into remainder
	sub	bh,ah	;remainder = remainder - divisor
	jnc	d8u_5		;if result negative
	add	bh,ah	;    restore remainder
	clc			;    clear carry to be shifted into result
	jmp	d8u_6		;else

d8u_5:	mov     si, 256
	add     si, 256 	;    set carry to be shifted into result  

d8u_6:	rol	al		;shift left dividend
	rol	bh		;shift dividend into remainder
	sub	bh,ah	;remainder = remainder - divisor
	jnc	d8u_7		;if result negative
	add	bh,ah	;    restore remainder
	clc			;    clear carry to be shifted into result
	jmp	d8u_8		;else

d8u_7:	mov     si, 256
	add     si, 256 	;    set carry to be shifted into result     

d8u_8:	rol	al		;shift left dividend
	rol	bh		;shift dividend into remainder
	sub	bh,ah	;remainder = remainder - divisor
	jnc	d8u_9		;if result negative
	add	bh,ah	;    restore remainder
	clc			;    clear carry to be shifted into result
	jmp	d8u_10		;else

d8u_9:	mov     si, 256
	add     si, 256 	;    set carry to be shifted into result     

d8u_10:	rol	al		;shift left dividend
	rol	bh		;shift dividend into remainder
	sub	bh,ah	;remainder = remainder - divisor
	jnc	d8u_11		;if result negative
	add	bh,ah	;    restore remainder
	clc			;    clear carry to be shifted into result
	jmp	d8u_12		;else

d8u_11:	mov     si, 256
	add     si, 256 	;    set carry to be shifted into result

d8u_12:	rol	al		;shift left dividend
	rol	bh		;shift dividend into remainder
	sub	bh, ah	;remainder = remainder - divisor
	jnc	d8u_13		;if result negative
	add	bh,	;    restore remainder
	clc			;    clear carry to be shifted into result
	jmp	d8u_14		;else

d8u_13:	mov     si, 256
	add     si, 256     	;set carry to be shifted into result

d8u_14:	rol	al		;shift left dividend
	rol	bh		;shift dividend into remainder
	sub	bh,ah	;remainder = remainder - divisor
	jnc	d8u_15		;if result negative
	add	bh,ah	;    restore remainder
	clc			;    clear carry to be shifted into result
	jmp	d8u_16		;else
d8u_15:	mov     si, 256
	add     si, 256 	;    set carry to be shifted into result

d8u_16:

rol	al		;shift left dividend


	ret

;--------------------------------------------------------------------------------------------------------------------------------------------------------------------



;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------




;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;----------------------------------------- DATOS DE PRUEBA ----------------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------

testdata:       ;128 el valor de los datos puede tomar valores entre -16384 y +16384
                ;todos los valores se tratan como enteros con signo
                ;Mantener todos los datos entre estos valores evita desbordamien.dw     -16000,-14000,-12000,-10000, -8000, -6000, -4000, -2000
	dw          0,  2000,  4000,  6000,  8000, 10000, 12000, 14000
	dw     -16000,-14000,-12000,-10000, -8000, -6000, -4000, -2000
	dw          0,  2000,  4000,  6000,  8000, 10000, 12000, 14000
	dw     -16000,-14000,-12000,-10000, -8000, -6000, -4000, -2000
	dw          0,  2000,  4000,  6000,  8000, 10000, 12000, 14000
	dw     -16000,-14000,-12000,-10000, -8000, -6000, -4000, -2000
	dw          0,  2000,  4000,  6000,  8000, 10000, 12000, 14000
	dw     -16000,-14000,-12000,-10000, -8000, -6000, -4000, -2000
	dw          0,  2000,  4000,  6000,  8000, 10000, 12000, 14000
	dw     -16000,-14000,-12000,-10000, -8000, -6000, -4000, -2000
	dw          0,  2000,  4000,  6000,  8000, 10000, 12000, 14000
	dw     -16000,-14000,-12000,-10000, -8000, -6000, -4000, -2000
	dw          0,  2000,  4000,  6000,  8000, 10000, 12000, 14000
	dw     -16000,-14000,-12000,-10000, -8000, -6000, -4000, -2000
	dw          0,  2000,  4000,  6000,  8000, 10000, 12000, 14000
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;------------------------------------------------TRIGONOMETRICAS-----------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------

sinetab:
dw     0, 1608, 3212, 4808, 6393, 7962, 9512,11039
dw 12539,14010,15446,16846,18204,19519,20787,22005
dw 23170,24279,25329,26319,27245,28105,28898,29621
dw 30273,30852,31356,31785,32137,32412,32609,32728
cosinetab:
dw 32767,32728,32609,32412,32137,31785,31356,30852
dw 30273,29621,28898,28105,27245,26319,25329,24279
dw 23170,22005,20787,19519,18204,16846,15446,14010
dw 12539,11039, 9512, 7962, 6393, 4808, 3212, 1608
dw     0,-1608,-3212,-4808,-6393,-7962,-9512,-11039
dw -12539,-14010,-15446,-16846,-18204,-19519,-20787,-22005
dw -23170,-24279,-25329,-26319,-27245,-28105,-28898,-29621
dw -30273,-30852,-31356,-31785,-32137,-32412,-32609,-32728
dw -32767,-32728,-32609,-32412,-32137,-31785,-31356,-30852
dw -30273,-29621,-28898,-28105,-27245,-26319,-25329,-24279
dw -23170,-22005,-20787,-19519,-18204,-16846,-15446,-14010
dw -12539,-11039,-9512,-7962,-6393,-4808,-3212,-1608
dw     0, 1608, 3212, 4808, 6393, 7962, 9512,11039
dw 12539,14010,15446,16846,18204,19519,20787,22005
dw 23170,24279,25329,26319,27245,28105,28898,29621
dw 30273,30852,31356,31785,32137,32412,32609,32728

;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------POSICIONES EN MATRICES--------------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------

posicionvalores128:
	db 1,2
	db 65,66
	db 33,34
	db 97,98
	db 17,18
	db 81,82
	db 49,50
	db 113,114
	db 9,10
	db 73,74
	db 41,42
	db 105,106
	db 25,26
	db 89,90
	db 57,58
	db 121,122
	db 5,6
	db 69,70
	db 37,38
	db 101,102
	db 21,22
	db 85,86
	db 53,54
	db 117,118
	db 13,14
	db 77,78
	db 45,46
	db 109,110
	db 29,30
	db 93,94
	db 61,62
	db 125,126
	db 3,4
	db 67,68
	db 35,36
	db 99,100
	db 19,20
	db 83,84
	db 51,52
	db 115,116
	db 11,12
	db 75,76
	db 43,44
	db 107,108
	db 27,28
	db 91,92
	db 59,60
	db 123,124
	db 7,8
	db 71,72
	db 39,40
	db 103,104
	db 23,24
	db 87,88
	db 55,56
	db 119,120
	db 15,16
	db 79,80
	db 47,48
	db 111,112
	db 31,32
	db 95,96
	db 63,64
	db 127,128

posicionvalores64:
	db       1,      2,     33,     34
	db      17,     18,     49,     50
	db       9,     10,     41,     42
	db      25,     26,     57,     58
	db       5,      6,     37,     38
	db      21,     22,     53,     54
	db      13,     14,     45,     46
	db      29,     30,     61,     62
	db       3,      4,     35,     36
	db      19,     20,     51,     52
	db      11,     12,     43,     44
	db      27,     28,     59,     60
	db       7,      8,     39,     40
	db      23,     24,     55,     56
	db      15,     16,     47,     48
	db      31,     32,     63,     64

posicionvalores32:
	db       1,      2,     17,     18
	db       9,     10,     25,     26
	db       5,      6,     21,     22
	db      13,     14,     29,     30
	db       3,      4,     19,     20
	db      11,     12,     27,     28
	db       7,      8,     23,     24
	db      15,     16,     31,     32


;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------


